if (Input.GetKeyDown(KeyCode.Q))
{
    if (n_qCube < 5)
    {
        if (n_Cube < 20)
        {
            x = Q_Deck[n_qCube];
            C[n_Cube] = GameObject.Instantiate(X_Cubes[x]);
            Pos_cubes[n_Cube] = C[n_Cube].transform;
            if (n_Cube == 0)
                Pos_cubes[n_Cube].localPosition = new Vector3(0, 1.0f, 0);
            else
            {
                Pos_cubes[n_Cube].localPosition = Pos_cubes[n_Cube - 1].position;
                Pos_cubes[n_Cube].Translate(0, 0.5f, 0);
            }
            Pos_cubes[n_Cube].localRotation = Quaternion.identity;

            a = a + 0.1f;
            n_Cube++;
            n_qCube++;
            state = false;
        }
        else
        {
            state = false;
        }
        Q_state = true;

        X_state = true;
        Z_state = false;
    }
    Place_Cube(X_Cubes, n_qCube, Q_Deck);
    n_qCube++;
    Q_state = true;
}

else if (Input.GetKeyDown(KeyCode.W))
{
    if (n_wCube < 5)
    {
        if (n_Cube < 20)
        {
            z = W_Deck[n_wCube];
            C[n_Cube] = GameObject.Instantiate(Z_Cubes[z]);
            Pos_cubes[n_Cube] = C[n_Cube].transform;
            if (n_Cube == 0)
                Pos_cubes[n_Cube].localPosition = new Vector3(0, 1.0f, 0);
            else
            {
                Pos_cubes[n_Cube].localPosition = Pos_cubes[n_Cube - 1].position;
                Pos_cubes[n_Cube].Translate(0, 0.5f, 0);
            }
            Pos_cubes[n_Cube].localRotation = Quaternion.identity;

            a = a + 0.1f;
            n_Cube++;
            n_wCube++;
            state = false;
        }
        else
        {
            state = false;
        }
        W_state = true;

        X_state = false;
        Z_state = true;

    }

    Place_Cube(Z_Cubes, n_wCube, W_Deck);
    n_wCube++;
    W_state = true;
}

else if (Input.GetKeyDown(KeyCode.E))
{
    if (n_eCube < 5)
    {
        if (n_Cube < 20)
        {
            x = E_Deck[n_eCube];
            C[n_Cube] = GameObject.Instantiate(X_Cubes[x]);
            Pos_cubes[n_Cube] = C[n_Cube].transform;
            if (n_Cube == 0)
                Pos_cubes[n_Cube].localPosition = new Vector3(0, 1.0f, 0);
            else
            {
                Pos_cubes[n_Cube].localPosition = Pos_cubes[n_Cube - 1].position;
                Pos_cubes[n_Cube].Translate(0, 0.5f, 0);
            }
            Pos_cubes[n_Cube].localRotation = Quaternion.identity;

            a = a + 0.1f;
            n_Cube++;
            n_eCube++;
            state = false;
        }
        else
        {
            state = false;
        }

    }
    Place_Cube(X_Cubes, n_eCube, E_Deck);
    n_eCube++;
    E_state = true;

    X_state = true;
    Z_state = false;
}

else if (Input.GetKeyDown(KeyCode.R))
{
    if (n_rCube < 5)
    {
        if (n_Cube < 20)
        {
            z = R_Deck[n_rCube];
            C[n_Cube] = GameObject.Instantiate(Z_Cubes[z]);
            Pos_cubes[n_Cube] = C[n_Cube].transform;
            if (n_Cube == 0)
                Pos_cubes[n_Cube].localPosition = new Vector3(0, 1.0f, 0);
            else
            {
                Pos_cubes[n_Cube].localPosition = Pos_cubes[n_Cube - 1].position;
                Pos_cubes[n_Cube].Translate(0, 0.5f, 0);
            }
            Pos_cubes[n_Cube].localRotation = Quaternion.identity;

            a = a + 0.1f;
            n_Cube++;
            n_rCube++;
            state = false;
        }
        else
        {
            state = false;
        }

    }
    Place_Cube(Z_Cubes, n_rCube, R_Deck);
    n_rCube++;
    R_state = true;

    X_state = false;
    Z_state = true;
}